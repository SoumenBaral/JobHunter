Here jobPost is a models of an App

1.get all the data from the tabe:

==<> jobPost.objects.all()

2. get the value of Spacific field's value

==<> jobPost.objects.filter(description = 'example')

if filteris object is not in table the filter return an empty array or list.
if it's empty is filtering () then it will be  like all() function

==<> jobPost.objects.all() 

3. Create a row of a table 

==<>jobPost.objects.create(title= 'Class Base view job', description='example',salary = 1000) 

OR
=<> j = jobPost(title= 'test job post',description ='this is for test ' ,salary = 3000)
=<> j.save()

4. get is same as filter but get will give only one value form the table if we want to get the value 
the table but this table has it's duplicate value the it will show an error 

==<> jobPost.objects.get(description='example')->take a value at a time 

if getting elemnet is not in the table then it rise an error that is :
raise self.model.DoesNotExist(
jobApp.models.jobPost.DoesNotExist: jobPost matching query does not exist.
)

if we don't give any paramerter in the get function the it will though an error that is duplicate value found

5. exclude  menas we need all the elemnet except it 

==<> jobPost.objects.exclude(salary =4340)

same as filter in another thinks 

6. Sorting .... 

=-<> jobPost.objects.order_by('title') sort by title in assinding order
=-<> jobPost.objects.order_by('-salary') dessinding order 
=-<> jobPost.objects.order_by('salary','title') add multple query to get sort
=-<> jobPost.objects.order_by('?') random Sort 


7. condition in filter

=-<> jobPost.objects.filter(salary__gt = 100) -->(grater then ' > ' )
=-<> jobPost.objects.filter(title__exact = 'Django devloper') ---->(equal)

8. Update the data :

=<> jobpost1 = jobPost.objects.all()[0]

=<> jobpost1.title = 'ami to vala na '

=<> jobpost1.save()

9. run multple  query :

=<> jobPost.objects.filter().exclude(salary = 5000)

=<> jobPost.objects.filter().exclude(salary = 5000).filter(title__contains='view')

10. contains we can use it for search :

=<> jobPost.objects.filter(title__contains='vala')


11.Aggregate ....

=<> jobPost.objects.count()
=<> jobPost.objects.filter(title__contains='React').count()
from django.db.models import Avg
=<> jobPost.objects.aggregate(Avg('salary'))
=<> jobPost.objects.aggregate(Max('salary'))
=<>  jobPost.objects.aggregate(different_sal=Max('salary')-Avg('salary'))

Avarage salary of first 3 person 

=<> jobPost.objects.filter(id__lte=3).aggregate(Avg('salary'))


Delete a Job Post ..........?

=<> j = jobPost(title= 'test job post',description ='this is for test ' ,salary = 3000)
=<> j.save()
=<> testJob = jobPost.objects.get(title ='test job post')
=<> testJob.delete()
=<> alljobtest = jobPost.objects.filter(title__icontains= 'test')
=<> alljobtest.delete() ------> (2, {'jobApp.jobPost': 2})